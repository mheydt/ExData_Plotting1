states = read.csv("http://bit.ly/dasi_states")
View(states)
summary(states)
pov_slr = lm(poverty ~ female_house, data = states)
summary(pov_slr)
cognitive = read.csv(“http://bit.ly/dasi_cognitive")!
cognitive = read.csv(“http://bit.ly/dasi_cognitive")
cognitive = read.csv("http://bit.ly/dasi_cognitive")
summary(cognitive)
cognitive
cog_full = lm(kid_score ~ mom_hs + mom_iq + mom_work + mom_age, data = cognitive)
summary(cog_full)
cog_full = lm(kid_score ~ mom_hs, data = cognitive)
summary(cog_full)
cog_full = lm(kid_score ~ mom_age, data = cognitive)
summary(cog_full)
cog_full = lm(kid_score ~ mom_age + mom_hs, data = cognitive)
summary(cog_full)
clear
clear()
set.seed(1)
rpois(5, 2)
?rnorm
?qnorm
?dnorm
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?rbinom
x
?rnorm
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.09
lm.D9
summaryRprof()
weight <- c(ctl, trt)
Rprof()
print(summaryRprof())
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
Rprof()
lm.D9 <- lm(weight ~ group)
Rprof(NULL)
summaryRprof()
?sys.sleep
?Sys.sleep
Rprof()
Sys.Sleep(1)
Rprof(Null)
summaryRprof()
Rprof()
Sys.sleep(1)
Rprof(Null)
summaryRprof()
Rprof()
Sys.sleep(1)
Rprof(NULL)
summaryRprof()
f <- Sys.sleep(1)
Rprof()
f
Rprof(NULL)
summaryRprof()
tail(ames)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/ames.RData"))
names(ames)
head(ames)
tail(ames)
area = ames$Gr.Liv.Area
price = ames$SalePrice
# Calculate the summary and draw a histogram of 'area'
summary(area)
hist(area)
samp0 = sample(area, 50)
samp1 = sample(area, 50)
# Draw the histograms:
hist(samp0)
hist(samp1)
# The 'ames' data frame and 'area' and 'price' objects are already loaded
# into the workspace
# Set up an empty vector or 5000 NAs to store sample means:
sample_means50 = rep(NA, 5000)
# Take 5000 samples of size 50 of 'area' and store all of them in
# 'sample_means50'.
for (i in 1:5000) {
samp = sample(area, 50)
sample_means50[i] = mean(samp)
}
# View the result. If you want, you can increase the bin width to show more
# detail by changing the 'breaks' argument.
hist(sample_means50, breaks = 13)
http://s3.amazonaws.com/assets.datacamp.com/course/dasi/evals.RData
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/evals.RData"))
evals
head(evals)
library(datasets)
data(mtcars)
?mtcats
?mtcars
with(mtcars, tapply(mpg, cal, mean))
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
e
x
?rnorm
?rbinom
print (x)
x <- rnorm(100, mean=5, sd=2)
print (x)
x <- rnorm(100, mean=5, sd=2)
print (x)
x <- rnorm(100, mean=5, sd=2)
print (x)
x <- rnorm(100, mean=5, sd=2)
print (x)
x <- rnorm(100, mean=5, sd=2)
print (x)
set.seed(10)
x <- rnorm(100, mean=5, sd=2)
print (x)
set.seed(10)
x <- rnorm(100, mean=5, sd=2)
print (x)
set.seed(10)
x <- rnorm(100, mean=5, sd=2)
print (x)
set.seed(10)
x <- rnorm(100, mean=5, sd=2)
print (x)
set.seed(10)
x <- rnorm(100, mean=5, sd=2)
print (x)
plot(x)
set.seed(10)
x <- rnorm(100, mean=5, sd=2)
print (x)
plot(x)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
set.seed(10)
x <- rbinom(100, 10, 0.5)
e <- rnorm(100, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
print (mean(y))
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
print (mean(y))
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(x)
print (mean(y))
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(e)
print (mean(y))
pnorm(0.1)
pnorm(0.1, 0.5, 0.1)
pnorm(0.1, 0.05, 0.1)
PA = c(38.23, 41.29)
PC = c(41.11, 41.74)
DA = 0.10
RA.total = (PA[2] + DA - PA[1])/PA[1]
RA.total
RC.total = (PC[2] + DA - PC[1])/PC[1]
RC.total
source('~/.active-rstudio-document')
View(sbux_df)
View(sbux_df)
source('~/.active-rstudio-document')
sbuc_ccret
sbux_ccret
sbux
sbux_ccret["12/1/2004",]
names(sbux_ccret)
sbux_ccret
sbux_ccret
sbux_ccret["12/1/2004"]
sbux_ccret["12/1/2005"]
log(-0.1341 + 1)
12 * log(-0.1341 + 1)
(1 - 0.1341) ** 12
(1 - 0.1341) ** 12 - 1
(sbux["December, 2005"] - sbux["December, 2004"]) / sbux["December, 2004"]
?qbeta
qbeta(0.75, 1,1)
qbeta(0.5, 2, 1)
qbeta(0.75, 2, 1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(xyplot(weight ~ Time | Diet, BodyWeight))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth="loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom="smooth")
setwd("~/Documents/Coursera/Data Science Specialization/Exploratory Data Analysis/PA1/ExData_Plotting1")
source("shared.R")
data <- build_data()
create_plot4(data)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquality)
library(qqplot2)
install.packages("qqplot")
install.packages("qqplot2")
install.packages("qqplot2")
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, geom="smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
